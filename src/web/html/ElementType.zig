/// Enum representing all default HTML tag types.
/// Deprecated tags are not present.
/// TODO: Should this be used as a tag type for an Element union?
pub const Enum = enum {
    // Document metadata
    base,
    head,
    link,
    meta,
    style,
    title,
    // Sectioning root
    body,
    // Content sectioning
    address,
    article,
    aside,
    footer,
    header,
    h1,
    h2,
    h3,
    h4,
    h5,
    h6,
    main,
    nav,
    section,
    // Text content
    blockquote,
    dd,
    div,
    dl,
    dt,
    figcaption,
    figure,
    hr,
    li,
    ol,
    p,
    pre,
    ul,
    // Inline text semantics
    a,
    abbr,
    b,
    bdi,
    bdo,
    br,
    cite,
    code,
    data,
    dfn,
    em,
    i,
    kbd,
    mark,
    q,
    rp,
    rt,
    ruby,
    s,
    samp,
    small,
    span,
    strong,
    sub,
    sup,
    time,
    u,
    @"var",
    wbr,
    // Image and multimedia
    area,
    audio,
    img,
    map,
    track,
    video,
    // Embedded content
    embed,
    iframe,
    object,
    param,
    picture,
    portal,
    source,
    // SVG and MathML
    svg,
    math,
    // Scripting
    canvas,
    noscript,
    script,
    // Demarcating edits
    del,
    ins,
    // Table content
    caption,
    col,
    colgroup,
    table,
    tbody,
    td,
    tfoot,
    th,
    thead,
    tr,
    // Forms
    button,
    datalist,
    fieldset,
    form,
    input,
    label,
    legend,
    meter,
    optgroup,
    option,
    output,
    progress,
    select,
    textarea,
    // Interactive elements
    details,
    dialogue,
    menu,
    summary,
    // Web components
    slot,
    template,
    // Deprecated tags ignored.

    const Self = @This();

    pub fn isInline(self: Self) bool {
        return switch (self) {
            .a, .abbr, .b, .bdi, .bdo, .br, .cite, .code, .data, .dfn, .em, .h1, .h2, .h3, .h4, .h5, .h6, .i, .kbd, .mark, .q, .rp, .rt, .ruby, .s, .samp, .small, .span, .strong, .sub, .sup, .time, .td, .u, .@"var", .wbr => true,
            else => false,
        };
    }
};
